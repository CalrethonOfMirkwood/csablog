{
  
    
        "post0": {
            "title": "Primitives Lesson",
            "content": "Presentation Hacks . // Hack 3 int val = 205; for(int i=0; i&lt;5; i++) { val/=2; } System.out.print(val); // Hack 4 int i = 3; for(int j = 5;j &gt; 0; j--){ i+=i; } System.out.print(i); // Hack 5 int i = 100; double d = 4.55; double d2 = 3.75; int j = (int) (d*100 + d2); System.out.print(j); // Hack 6 int i = 5; int p =27; for(int l = 23; l &lt;p; l++){ i*=(l-22); } System.out.print(i); . FRQ 2006 - 2a,3a . // 2A public double purchasePrice(double x){ x *= 1.1; return x; } purchasePrice(6.50); . // 3A public class Customer { private String name; private int id; public Customer(String name, int idNum){ this.name = name; this.id = idNum; // idNum = this.idNum; }; public String getName(){ return name; }; public int getID(){ return id; }; public void compareCustomer(Customer x){ System.out.println(id - x.id); // return (id - x.id); }; } Customer c1 = new Customer(&quot;Smith&quot;, 1001); Customer c2 = new Customer(&quot;Anderson&quot;, 1002); Customer c3 = new Customer(&quot;Smith&quot;, 1003); c1.compareCustomer(c1); c1.compareCustomer(c2); c1.compareCustomer(c3); .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/10/17/primitiveslesson.html",
            "relUrl": "/jupyter/2022/10/17/primitiveslesson.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "OOP Lesson",
            "content": "Goblin Fight Hack . Add hit chance calculation . import java.util.*; public class Goblin { private String name; private int HP; private int DMG; private double hitChance; public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } public class Duel { public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { // goblin1 hit chance tester if (Math.random() &lt; goblin2.getHitChance()) { goblin2.takeDMG(goblin2.getDMG()); System.out.println(goblin1.getName() + &quot; takes &quot; + goblin2.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin2.getName() + &quot; missed!&quot;); } // print hp of goblin1 System.out.println(goblin1.getName() + &quot; HP: &quot; + goblin1.getHP()); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } // if statement for goblin2 hit chance if (Math.random() &lt; goblin1.getHitChance()) { goblin2.takeDMG(goblin1.getDMG()); System.out.println(goblin2.getName() + &quot; takes &quot; + goblin1.getDMG() + &quot; damage&quot;); } else { System.out.println(goblin1.getName() + &quot; missed!&quot;); } // print hp of goblin2 System.out.println(goblin2.getName() + &quot; HP: &quot; + goblin2.getHP()); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;Thomas Jefferson&quot;); goblin1.setHP(12); goblin1.setDMG(2); goblin1.setHitChance(0.5); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;George Washington&quot;); goblin2.setHP(4); goblin2.setDMG(1); goblin2.setHitChance(0.75); fight(goblin1, goblin2); } } Duel.main(null); . 2021 FRQ 1 . import java.util*; public class WordMatch { String secret; public WordMatch(String secret) { this.secret = secret; } public void scoreGuess(String guess) { int counter = 0; // for loop for first substring index for (int i = 0; i &lt; this.secret.length(); i++){ // loop for second substring index for (int j = i + 1; j &lt; this.secret.length() + 1; j++) { // if statement if (guess.equals(this.secret.substring(i,j))) { counter++; } } } // Returning a point value int points = counter * guess.length() * guess.length(); System.out.println(&quot;&quot; + guess + &quot; = &quot; + points); // return points; } } WordMatch game = new WordMatch(&quot;mississippi&quot;); game.scoreGuess(&quot;i&quot;); game.scoreGuess(&quot;iss&quot;); game.scoreGuess(&quot;issipp&quot;); game.scoreGuess(&quot;mississippi&quot;); WordMatch game = new WordMatch(&quot;aaaabb&quot;); game.scoreGuess(&quot;a&quot;); game.scoreGuess(&quot;aa&quot;); game.scoreGuess(&quot;aaa&quot;); game.scoreGuess(&quot;aabb&quot;); game.scoreGuess(&quot;c&quot;); .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/10/17/ooplesson.html",
            "relUrl": "/jupyter/2022/10/17/ooplesson.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Arrays Lesson",
            "content": "Lesson Purpose and Objectives . Understand how arrays work and how to use them | Understand advantages and disadvantages in Java | . AP Classroom Requirements . 3.D - Write program code to create, traverse, and manipulate elements in 1D array or ArrayList objects. | 6.1 - Array Creation and Access | 6.2 - Traversing Arrays | 6.3 - Enhanced for Loop for Arrays | 6.4 - Developing Algorithms Using Arrays | . Hacks / Homework . Write a class called ArrayExtremes that has two methods to compute the maximum and minimum values. You may use the template given below or write your own class . Minimum Requirements: Do this using a fixed 10-integer array and two integer outputs | Create separate methods for min and max. | . | Bonus points if you have one or more of the following: Try making it be an object that can be initialized with the following attributes: Original array, minimum, maximum | . | . public class ArrayExtremes { int[] array = {7,3,76,42,98,23,4,6,65,74}; int min = Integer.MAX_VALUE; int max = Integer.MIN.VALUE; public static void main(String[] args) { min(); max(); } static void min() { for (int i=0; i&lt;array.lenth; i++) { if (array[i] &lt; min) min = array[i]; } static void max() { for (int i=0; i&lt;array.lenth; i++) { if (arrray[i] &gt; max) max = array[i]; } } } .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/10/17/arrayslesson.html",
            "relUrl": "/jupyter/2022/10/17/arrayslesson.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Java Arraylist",
            "content": "import java.util.ArrayList; public class kpopList { public static void main(String[] args) { testing(null); } public static void testing(String[] args) { // define list bts ArrayList&lt;String&gt; bts = new ArrayList&lt;String&gt;(Arrays.asList(&quot;Jin&quot;, &quot;Suga&quot;, &quot;J-Hope&quot;, &quot;RM&quot;, &quot;Jimin&quot;, &quot;V&quot;, &quot;Jungkook&quot;)); // print current list System.out.println(&quot;Print current list&quot;); System.out.println(&quot;List : &quot; + bts); System.out.println(&quot;The list currently has &quot; + bts.size() + &quot; items&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); // Add &quot;Bob&quot; to the end of list System.out.println(&quot;Add new item using add()&quot;); bts.add(&quot;Bob&quot;); System.out.println(&quot;Added &quot;Bob &quot; to list&quot;); System.out.println(&quot;List : &quot; + bts); System.out.println(&quot;The list currently has &quot; + bts.size() + &quot; items&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); // Adding &quot;Bob&quot; at specified index System.out.println(&quot;Add new item at specific index using set()&quot;); bts.set(0, &quot;Bob&quot;); System.out.println(&quot;Set &quot;Bob &quot; to list at index 0&quot;); System.out.println(&quot;List : &quot; + bts); System.out.println(&quot;The list currently has &quot; + bts.size() + &quot; items&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); // get specefic element then remove it System.out.println(&quot;Get specific element using get(), then remove it using remove()&quot;); System.out.println(&quot;This is the element at index 2: &quot; + bts.get(4) + &quot;. Let&#39;s remove it.&quot;); bts.remove(4); System.out.println(&quot;List : &quot; + bts); System.out.println(&quot;The list currently has &quot; + bts.size() + &quot; items&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); // Removing a specific element based on name System.out.println(&quot;Remove &quot;Jungkook &quot; using remove()&quot;); bts.remove(&quot;Jungkook&quot;); System.out.println(&quot;Removed &quot;Jungkook &quot;&quot;); System.out.println(&quot;List : &quot; + bts); System.out.println(&quot;The list currently has &quot; + bts.size() + &quot; items&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); // See if &quot;Jungkook&quot; exists using System.out.println(&quot;See if &quot;Jungkook &quot; exists using contains()&quot;); System.out.println(&quot;Output of bts.contains( &quot;Jungkook &quot;) : &quot; + bts.contains(&quot;Jungkook&quot;)); System.out.println(&quot;List : &quot; + bts); System.out.println(&quot;The list currently has &quot; + bts.size() + &quot; items&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); // Find first index of &quot;Bob&quot; System.out.println(&quot;Find first index of &quot;Bob &quot; using indexOf()&quot;); System.out.println(&quot;Outpuf of bts.indexOf( &quot;Bob &quot;) : &quot; + bts.indexOf(&quot;Bob&quot;)); System.out.println(&quot;List : &quot; + bts); System.out.println(&quot;The list currently has &quot; + bts.size() + &quot; items&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); // Find last index of &quot;Bob&quot; System.out.println(&quot;Find last index of &quot;Jungkook &quot; using lastIndexOf()&quot;); System.out.println(&quot;Outpuf of bts.lastIndexOf( &quot;Bob &quot;) : &quot; + bts.lastIndexOf(&quot;Bob&quot;)); System.out.println(&quot;List : &quot; + bts); System.out.println(&quot;The list currently has &quot; + bts.size() + &quot; items&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); // See if list is empty System.out.println(&quot;See if the list is empty using the isEmpty()&quot;); System.out.println(&quot;Output of bts.isEmpty() : &quot; + bts.isEmpty()); System.out.println(&quot;List : &quot; + bts); System.out.println(&quot;The list currently has &quot; + bts.size() + &quot; items&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); // Clearing the entire list System.out.println(&quot;Clearing the entire list using the clear()&quot;); bts.clear(); System.out.println(&quot;List : &quot; + bts); System.out.println(&quot;The list currently has &quot; + bts.size() + &quot; items&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); // See if list is empty again System.out.println(&quot;See if the list is empty using the isEmpty()&quot;); System.out.println(&quot;Output of bts.isEmpty() : &quot; + bts.isEmpty()); System.out.println(&quot;List : &quot; + bts); System.out.println(&quot;The list currently has &quot; + bts.size() + &quot; items&quot;); System.out.println(&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;); } } kpopList.main(null); . Print current list List : [Jin, Suga, J-Hope, RM, Jimin, V, Jungkook] The list currently has 7 items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Add new item using add() Added &#34;Bob&#34; to list List : [Jin, Suga, J-Hope, RM, Jimin, V, Jungkook, Bob] The list currently has 8 items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Add new item at specific index using set() Set &#34;Bob&#34; to list at index 0 List : [Bob, Suga, J-Hope, RM, Jimin, V, Jungkook, Bob] The list currently has 8 items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Get specific element using get(), then remove it using remove() This is the element at index 2: Jimin. Let&#39;s remove it. List : [Bob, Suga, J-Hope, RM, V, Jungkook, Bob] The list currently has 7 items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Remove &#34;Jungkook&#34; using remove() Removed &#34;Jungkook&#34; List : [Bob, Suga, J-Hope, RM, V, Bob] The list currently has 6 items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ See if &#34;Jungkook&#34; exists using contains() Output of bts.contains(&#34;Jungkook&#34;) : false List : [Bob, Suga, J-Hope, RM, V, Bob] The list currently has 6 items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Find first index of &#34;Bob&#34; using indexOf() Outpuf of bts.indexOf(&#34;Bob&#34;) : 0 List : [Bob, Suga, J-Hope, RM, V, Bob] The list currently has 6 items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Find last index of &#34;Jungkook&#34; using lastIndexOf() Outpuf of bts.lastIndexOf(&#34;Bob&#34;) : 5 List : [Bob, Suga, J-Hope, RM, V, Bob] The list currently has 6 items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ See if the list is empty using the isEmpty() Output of bts.isEmpty() : false List : [Bob, Suga, J-Hope, RM, V, Bob] The list currently has 6 items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Clearing the entire list using the clear() List : [] The list currently has 0 items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ See if the list is empty using the isEmpty() Output of bts.isEmpty() : true List : [] The list currently has 0 items ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/10/09/arraylist.html",
            "relUrl": "/jupyter/2022/10/09/arraylist.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Java Images",
            "content": "// awt library import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; // io library import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; // ImageIO library import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // Find images in /images private final String outDir = &quot;images/tmp/&quot;; // Temp folder for new files private final String greyDir = &quot;images/tmp/greyscale/&quot;; // location and color of new files private final String redDir = &quot;images/tmp/red/&quot;; private final String blueDir = &quot;images/tmp/blue/&quot;; private final String greenDir = &quot;images/tmp/green/&quot;; private String inFile; private String resizedFile; private String redFile; private String greenFile; private String blueFile; private String greyscaleFile; private String asciiFile; private String ext; private long bytes; private int width; private int height; // Get attributes of image public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyscaleFile = this.greyDir + name + &quot;_grey&quot; + &quot;.&quot; + ext; this.redFile = this.redDir + name + &quot;_red&quot; + &quot;.&quot; + ext; this.blueFile = this.blueDir + name + &quot;_blue&quot; + &quot;.&quot; + ext; this.greenFile = this.greenDir + name + &quot;_green&quot; + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // Get image dimensions public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } public void greyscale() { BufferedImage img = null; BufferedImage greyImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greyImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color( total, total, total ); greyImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greyImg), this.ext, new File(greyscaleFile)); } catch (IOException e) { return; } this.inFile = this.greyscaleFile; // use scaled file vs original file in Class this.setStats(); } public void redscale() { BufferedImage img = null; BufferedImage redImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data redImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) co.getRed(); int green = 0; int blue = 0; Color newColor = new Color( red, green, blue); redImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(redImg), this.ext, new File(redFile)); } catch (IOException e) { return; } this.inFile = this.redFile; // use scaled file vs original file in Class this.setStats(); } public void greenscale() { BufferedImage img = null; BufferedImage greenImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greenImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = 0; int green = (int) co.getGreen(); int blue = 0; Color newColor = new Color( red, green, blue); greenImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greenImg), this.ext, new File(greenFile)); } catch (IOException e) { return; } this.inFile = this.greenFile; // Use scaled file vs original file in Class this.setStats(); } public void bluescale() { BufferedImage img = null; BufferedImage blueImg = null; try { // Read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // Set buffer of image data blueImg = img; // Create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color(0, 0, total); blueImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(blueImg), this.ext, new File(blueFile)); } catch (IOException e) { return; } this.inFile = this.blueFile; // Use scaled file vs original file in Class this.setStats(); } // Convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { if (i % 2 != 0) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } } // Conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public static void main(String[] args) throws IOException { Pics squid = new Pics(&quot;squid&quot;, &quot;png&quot;); squid.convertToAscii(); squid.greyscale(); Pics squidred = new Pics(&quot;squid&quot;, &quot;png&quot;); squidred.redscale(); Pics squidgreen = new Pics(&quot;squid&quot;, &quot;png&quot;); squidgreen.greenscale(); Pics squidblue = new Pics(&quot;squid&quot;, &quot;png&quot;); squidblue.bluescale(); squid.printStats(&quot;Original&quot;); squid.resize(41); squid.printStats(&quot;Scaled&quot;); Pics monalisa = new Pics(&quot;monalisa&quot;, &quot;png&quot;); monalisa.convertToAscii(); monalisa.greyscale(); Pics monalisared = new Pics(&quot;monalisa&quot;, &quot;png&quot;); monalisared.redscale(); Pics monalisagreen = new Pics(&quot;monalisa&quot;, &quot;png&quot;); monalisagreen.greenscale(); Pics monalisablue = new Pics(&quot;monalisa&quot;, &quot;png&quot;); monalisablue.bluescale(); monalisa.printStats(&quot;Original&quot;); monalisa.resize(41); monalisa.printStats(&quot;Scaled&quot;); } } Pics.main(null); . Original: 449191 1280x720 images/tmp/greyscale/squid_grey.png Scaled: 105223 525x295 images/tmp/squid.png Original: 227380 389x413 images/tmp/greyscale/monalisa_grey.png Scaled: 36240 159x169 images/tmp/monalisa.png . Original images: . Greyscaled images: . Red images: . Blue images: . Green images: . ASCII: .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/10/02/images.html",
            "relUrl": "/jupyter/2022/10/02/images.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fibbonacci",
            "content": "import java.util.Scanner; class fibbonacci{ int n1=0; int n2=1; int n3 = 10; int i = 2; int num = 0 Scanner sus = new Scanner(System.in); public static void main(String args[]) { System.out.println(&quot;Enter integer: &quot;); num = sus.nextInt(); For(); While(); Recursive(num); } static void For(){ System.out.print(n1+&quot; &quot;+n2);//printing 0 and 1 for (i &lt; num; i++) {//loop starts from 2 because 0 and 1 are already printed n3=n1+n2; System.out.print(&quot; &quot;+n3); n1=n2; n2=n3; } } static void While(){ System.out.print(n1+&quot; &quot;+n2);//printing 0 and 1 whlie (i &lt; num; i++) { n3=n1+n2; System.out.print(&quot; &quot;+n3); n1=n2; n2=n3; } } static void Recursive(n){ if ((n == 0) || (n == 1)) return n; else return Recursive(n - 1) + Recursive(n - 2); } } . Skill 1.B:Determine code that would be used to complete code segments (ie For, While, Recursion) . I have made the functions. . Skill 4.C:Determine if two or more code segments yield equivalent results (be sure to Discuss how you know results are the same) . They all yield the same results because 1. the for and while loops contain the same code, just rerun under different mechanisms, and 2. all of the functions are solving the same fibbonacci sequence. . Skill 5.A:Describe the behavior of a given segment of program code (describe the difference in recursion versus for &amp; while loops, perhaps add timing to determine speed) . The for and whlie loops run the same sequence to calculate the next number but the recursive function uses previous results. Therefore the recursive funciton is more efficient and has a faster runtime than the for and while loops .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/09/25/fibbonacci.html",
            "relUrl": "/jupyter/2022/09/25/fibbonacci.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "FRQ",
            "content": "Main: . class Main { public static void main(String[] args) { WordMatch game = new WordMatch(&quot;mississippi&quot;); int play = game.scoreGuess(&quot;mississippi&quot;); System.out.printf(&quot;Guess: mississippi nScore: %d n&quot;, play); WordMatch game2 = new WordMatch(&quot;concatenation&quot;); int play2 = game2.scoreGuess(&quot;nation&quot;); System.out.printf(&quot; nGuess 1: ten nScore: %d n&quot;, play2); System.out.printf(&quot; nGuess 2: nation nScore: %d n&quot;, play2); } } . class Wordmatch: . /** * Main class for WordMatch.java * */ public class WordMatch { private String secret; public WordMatch(String secret) { this.secret = secret; } /** * scoreGuess * * @param guess * @return */ public int scoreGuess(String guess) { int lastIndex = 0; int count = 0; while (lastIndex != -1) { lastIndex = secret.indexOf(guess, lastIndex); if (lastIndex != -1) { count++; lastIndex += guess.length(); } } return count * guess.length() * guess.length(); } public String findBetterGuess(String guess1, String guess2) { int guessA = scoreGuess(guess1); int guessB = scoreGuess(guess2); if(guessA &gt; guessB) return guess1; if(guessB &gt; guessA) return guess2; if((guess1.compareTo(guess2)) &gt; 0) { return guess1; } return guess2; } } .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/09/20/frq1.html",
            "relUrl": "/jupyter/2022/09/20/frq1.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Iteration Minilab 1",
            "content": "Classic 99 bottes: . for (int count = 99; count &gt; 1; count--){ System.out.println(count + &quot; bottles of rum on the wall, &quot; + count + &quot; bottles of rum,&quot;); System.out.println(&quot;Take one down, pass it around, &quot; + (count - 1) + &quot; bottles of rum on the wall, &quot;); } System.out.println(&quot;1 bottle of rum on the wall, 1 bottle of rum&quot;); System.out.println(&quot;Take one down, pass it around, no bottles of rum on the wall&quot;); System.out.println(&quot;No more bottles of rum on the wall, no more bottles of rum.&quot;); System.out.println(&quot;Go to the store, buy some more, 99 bottles of rum on the wall!&quot;); . ASCII art 99 bottles. . String [][] bottleArt = { {//art for printing multiple bottles &quot; _ &quot;, &quot; {_} &quot;, &quot; |(| &quot;, &quot; |=| &quot;, &quot;/ &quot;, &quot;|.--| &quot;, &quot;|| | &quot;, &quot;|&#39;--| &quot;, &quot;&#39;-=-&#39; &quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, }, {//art for drinking bottle &quot; _&quot;, &quot; {_}&quot;, &quot; |(|&quot;, &quot; |=|&quot;, &quot;/ &quot;, &quot;|.--|&quot;, &quot;|| | . &#39; .&quot;, &quot;|&#39;--| &#39; ~~~/&quot;, &quot;&#39;-=-&#39; ~~~/ _/&quot;, &quot; _/ Y&quot;, &quot; Y _|_&quot;, &quot; _|_&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot; }, { //final bottle art at end &quot;(&quot;, &quot; * ) *&quot;, &quot; ) * (&quot;, &quot; ) ( (&quot;, &quot; ( ) ( )&quot;, &quot; ) * ) ) (&quot;, &quot; ( ( ( *&quot;, &quot; ) H ) )&quot;, &quot; [ ] (&quot;, &quot; ( * |-| * ) (&quot;, &quot; * ) |_| . )&quot;, &quot; ( | | . &quot;, &quot; ) / . &#39; . *&quot;, &quot; ( |_____| &#39; . . &quot;, &quot; ) | ___ | ~~~/ &#39; . (&quot;, &quot; * | / | _/ ~~~/ )&quot;, &quot; | _Y_ | | _/ (&quot;, &quot; * |--| __|__ | *&quot;, &quot; `--` __|__&quot; } }; for (int count = 9; count &gt; 1; count--){ for (int i = 0; i &lt; 7; i++){ //print upper half of bottle for (int j = count; j &gt; 0; j--) System.out.print(bottleArt[0][i]); System.out.println(); } for (int i = count; i &gt; 0; i--) System.out.print(&quot;|| &quot; + i + &quot;| &quot;); //print labeled midsection of bottle System.out.println(); for (int i = 7; i &lt; 10; i++){ //print lower half of bottle for (int j = count; j &gt; 0; j--) System.out.print(bottleArt[0][i]); System.out.println(); } System.out.println(count + &quot; bottles of rum on the wall, &quot; + count + &quot; bottles of rum,&quot;); for (int i = 0; i &lt; 7; i++){ //print upper half of bottle for (int j = count; j &gt; 0; j--) System.out.print(bottleArt[1][i]); System.out.println(); } System.out.println(&quot;|| &quot; + count + &quot;| &quot;); //print labeled midsection of bottle for (int i = 7; i &lt; 13; i++){ //print lower half of bottle for (int j = count; j &gt; 0; j--) System.out.print(bottleArt[1][i]); System.out.println(); } System.out.println(&quot;Take one down, pass it around, &quot; + (count - 1) + &quot; bottles of rum on the wall, &quot;); } System.out.println(&quot;1 bottle of rum on the wall, 1 bottle of rum&quot;); System.out.println(&quot;Take one down, pass it around, no bottles of rum on the wall&quot;); System.out.println(); for (int i = 0; i &lt; 19; i++) System.out.println(bottleArt[2][i]); System.out.println(&quot;No more bottles of rum on the wall, no more bottles of rum.&quot;); System.out.println(&quot;Go to the store, buy some more, 99 bottles of rum on the wall!&quot;); .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/09/19/iteration.html",
            "relUrl": "/jupyter/2022/09/19/iteration.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "If-Else and De Morgan's Law",
            "content": "If-Else . if-else statements are one of the first things beginner programmers learn. Conceptually, it is very simple. . If (condition), do (action x). . You can add an &quot;else&quot; to the end of an if statement to do an action. . If (condition), do (action x). Else, do (action y). . You can also stack if-else statements. Stack when you want to check a condition if the previous condition was false. You can stack as many times as you want (within computing capabilities of course). . If (condition A), do (action x). Else, if (condition B), do (action y). Else, do (action z) . Combined with basic logic gates, if else statements are used like this: . // `dog` and `cat` are booleans that are true or false // in the conditional statements, they themselves are either `true` or `false` and do not need `==` to compare Boolean dog = false; // set dog to false because I do not have a dog Boolean cat = false; // set cat to false because I do not have a cat if (dog &amp;&amp; !cat) { // `&amp;&amp;` is the AND logic gate, the exclemation mark in front of cat is NOT System.out.print(&quot;Woof woof!&quot;); // prints if dog is true but cat is false } else if (!dog &amp;&amp; cat) { // this check happens only if previous gate is false System.out.print(&quot;Meow meow!&quot;); // prints if dog is false but cat is true } else if (dog) { // this check happens only if both previous checks are false, meaning there must be either cat and dog are either both true or both false System.out.print(&quot;Woof meow woof meow, meow wolf meow wolf!&quot;); // if dog is true and both previous gates failed, then that means both dog and cat must be true } else System.out.print(&quot;it&#39;s very quiet in here...&quot;); // this check happens only if all three previous checks are false, therefore both cat and dog must be false . it&#39;s very quiet in here... . De Morgan&#39;s Law . Can you explain why the below code doesn&#39;t print anything? . // ps. what the booleans are set to are irrelevent Boolean amogi = true; Boolean banan = false; if ( !(amogi &amp;&amp; banan) == (!amogi &amp;&amp; !banan) ) { // why are the two conditions not equal? System.out.print(&quot;wait what?&quot;); // why is it not printing? } . De Morgan&#39;s law is a logical rule which states that the negation of a disjunction is the conjunction of the negations (and the converse that the negation of a conjunction is the disjunction of the negations). . In other words, this means that: . `not (A or B) = (not A) and (not B)&#39; . And the converse: `not (A and B) = (not A) or (not B)&#39; . Let&#39;s test De Morgan&#39;s law out: . // set booleans Boolean amogi = true; Boolean banan = false; if ( !(amogi || banan) == (!amogi &amp;&amp; !banan) ){ System.out.println(&quot;huh&quot;); } if ( !(amogi &amp;&amp; banan) == (!amogi || !banan) ){ System.out.print(&quot;wow this really works huh&quot;); } . huh wow this really works huh .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/09/10/ifelse.html",
            "relUrl": "/jupyter/2022/09/10/ifelse.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Java Console Menu",
            "content": "The following is a java console menu with descriptive comments. A lot of the color skills I use here I learned from making my eariler bash notebook. . import java.util.Scanner; // scanner takes in user input import java.lang.Math; // Math library has RNG funciton import java.net.InetAddress; // get ip address import java.net.UnknownHostException; // host ecxeption for ip address public class consoleMenu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORSTEXT = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; public final String[][] COLORSHIGH = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[41m&quot;}, {&quot;Green&quot;, &quot; u001B[42m&quot;}, {&quot;Yellow&quot;, &quot; u001B[43m&quot;}, {&quot;Blue&quot;, &quot; u001B[44m&quot;}, {&quot;Purple&quot;, &quot; u001B[45m&quot;}, {&quot;Cyan&quot;, &quot; u001B[46m&quot;}, {&quot;White&quot;, &quot; u001B[47m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes public final String[] LOADING = {&quot;L&quot;,&quot;o&quot;,&quot;a&quot;,&quot;d&quot;,&quot;i&quot;,&quot;n&quot;,&quot;g&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot; &quot;}; // Constructor on this Object takes control of menu events and actions public consoleMenu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot; u001B[31m __ .__ &quot;); System.out.println(&quot; u001B[31m |__|_____ ___ _______ ____ ____ ____ ______ ____ | | ____ &quot;); System.out.println(&quot; u001B[31m | | __ / / __ _/ ___ / _ / / ___// _ | | _/ __ &quot;); System.out.println(&quot; u001B[31m | | / __ _ / / __ _ ___( &lt;_&gt; )| | ___ ( &lt;_&gt; )| |__ ___/ &quot;); System.out.println(&quot; u001B[31m/ __| |(____ / _/ (____ / ___ &gt; ____/ |___| //____ &gt; ____/ |____/ ___ &gt; &quot;); System.out.println(&quot; u001B[31m ______| / / / / / / u001B[30m&quot;); System.out.println(&quot; u001B[33m~~~~~~~~~~~~~~~~~~~~~~~~~ u001B[30m&quot;); System.out.println(&quot; u001B[31m1 u001B[30m - Say Hello&quot;); System.out.println(&quot; u001B[33m2 u001B[30m - Output text colors&quot;); System.out.println(&quot; u001B[32m3 u001B[30m - Output highlight colors&quot;); System.out.println(&quot; u001B[36m4 u001B[30m - Loading in color&quot;); System.out.println(&quot; u001B[34m5 u001B[30m - Random number generator&quot;); System.out.println(&quot; u001B[35m6 u001B[30m - Print ip address&quot;); System.out.println(&quot; u001B[37m0 u001B[30m - Quit&quot;); System.out.println(&quot; u001B[33m~~~~~~~~~~~~~~~~~~~~~~~~~ u001B[30m n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Quitting. Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORSTEXT.length; i++) // loop through COLORS array System.out.print(COLORSTEXT[i][ANSI] + COLORSTEXT[i][NAME] + &quot; &quot;); break; case 3: for(int i = 0; i &lt; COLORSHIGH.length; i++) // loop through COLORS array System.out.print(COLORSHIGH[i][ANSI] + COLORSHIGH[i][NAME] + &quot; &quot;); break; case 4: for (int i = 0; i &lt; 66; i++) { // fixed length loading bar, 66 characters int random = (int) (Math.random() * COLORSTEXT.length); // random logic try { Thread.sleep(50); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORSTEXT[random][ANSI] + LOADING[i % 11]); } break; case 5: Scanner fivescan = new Scanner(System.in); System.out.println(&quot;Random number generator&quot;); System.out.println(&quot; Choose minimum (integer) number: &quot;); int min = fivescan.nextInt(); System.out.println(&quot; Choose maximum (also integer) number: &quot;); int max = fivescan.nextInt(); int num = (int) ((Math.random() * (max - min)) + min); int color = (int) (Math.random() * COLORSTEXT.length); System.out.print(&quot; Your random number (in a random color): &quot; + COLORSTEXT[color][ANSI] + num); break; case 6: try { InetAddress localHost = InetAddress.getLocalHost(); String ipaddress = localHost.getHostAddress(); int random = (int) (Math.random() * COLORSTEXT.length); // random logic color chooser System.out.print(&quot;Your ip address is &quot; + COLORSTEXT[random][ANSI] + &quot; u001B[1m&quot; + ipaddress); } catch (UnknownHostException e) { e.printStackTrace(); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new consoleMenu(); // starting Menu object } } consoleMenu.main(null); .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/09/05/consolemenu.html",
            "relUrl": "/jupyter/2022/09/05/consolemenu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Blog Goals",
            "content": "This Blog . This blog was made to meet the requirements of my CSA class and College Board. However, there is much more I can do with this blog. . I am thinking of using this to support me in APEL and my general interest in literature. . I have several options: publishing my short stories, grammar or rethoric lessons, book reviews, or general book-related blogging. I may choose just one but will most likely do a mix of all four. . Of course, this will all be in addition to the 10 College Board units that I will go through this year. I am sure I can use the things I learn in college board to improve my blog so I can better describe literature. . PBL vs College Board? . Project-based learning is the curriculum of the class, College Board sets different requriements. . PBL is generally project-focused and will be most visible on this blog. In contrast, CB material is largely theoretical and will be moure foundational to the blog. . I will differentiate between the two by using tags. Currently all of the blog posts on this blog have the [jupyter] tag. I plan to make two more tags, [PBL] and [CB] to differentiate between my PBL and College Board work. .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/08/29/goals.html",
            "relUrl": "/jupyter/2022/08/29/goals.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Primitive Data Types",
            "content": "Primitives . Java has several data types, the most basic of which are &quot;primitives&quot;. . Excluding booleans, primitive data types are numeric: either a number or a character. Some primitive data types are char (single alphanumeric character), int (whole numbers), double (decimal number), and boolean (true or false condition). . Non-primitive data types are strings and arrays. . import java.util.Scanner; // import scanner function to take user input public class primitiveTest { // class public static void main(String[] args) { // main Scanner input; // begin story System.out.println(&quot;You woke up and went to school.&quot;); // string wrapper input = new Scanner(System.in); // create scanner System.out.println(&quot;What is your name: &quot;); // take input String name = input.nextLine(); // sets variable and checks that data type is string System.out.println(&quot;You, &quot; + name + &quot; woke up and went to school.&quot;); input.close(); System.out.println(); // primitive int input = new Scanner(System.in); // create scanner System.out.println(&quot;How many friends do you have?: &quot;); // take input try { int friends = input.nextInt(); // sets variable and checks that data type is int if (friends == 0) System.out.println(&quot;You have &quot; + friends + &quot; friends. SAD!&quot;); if (friends == 1) System.out.println(&quot;You have &quot; + friends + &quot; friend.&quot;); if (friends &gt;= 2) System.out.println(&quot;You have &quot; + friends + &quot; friends.&quot;); } catch (Exception e) { // error if input is not int System.out.println(&quot;You can only have an integer number of friends, that isn&#39;t an int, &quot; + e); } input.close(); System.out.println(); // primitive double System.out.println(&quot;It&#39;s time for CSA.&quot;); input = new Scanner(System.in); // create scanner System.out.println(&quot;What is your grade in the class ? (double format without %): &quot;); // take input try { double grade = input.nextDouble(); // sets variable and checks that data type is double if (grade &lt;= 50.0) System.out.println(grade + &quot;%... I don&#39;t know what to say.&quot;); else if (grade &lt;= 70.00) System.out.println(grade + &quot;%... Looks like you been code code coding.&quot;); else if (grade &lt;= 80.0) System.out.println(grade + &quot;%. I&#39;m not in the mood to make any moral judgements on them.&quot;); else if (grade &lt;= 90.0) System.out.println(grade + &quot;%. You&#39;re doing ok.&quot;); else System.out.println(grade + &quot;%! &quot; + name + &quot;crusing.&quot;); } catch (Exception e) { // error if input is not a double System.out.println(&quot;Not an double (form like 13.51), &quot; + e); } input.close(); System.out.println(); // primitive boolean System.out.println(&quot;It&#39;s crossover grading time.&quot;); input = new Scanner(System.in); System.out.println(&quot;Did you do your work? (lowercase true/false): &quot;); // take input try { boolean hw = input.nextBoolean(); if (hw) System.out.println(&quot;You did your homework. Great.&quot;); else System.out.println(&quot;You didn&#39;t do your homework. Are you ready to face the consequences?&quot;); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); } } primitiveTest.main(null); .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/08/28/primitives.html",
            "relUrl": "/jupyter/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Bashbook",
            "content": "Bash demonstration . In this usage echo prints out the given argument. . echo &quot;Echo returns its argument&quot; . The following script prints your ip address. . hostname -I . The following prints your ip address but red . echo -e &quot; e[31m $(hostname -I) e[0m&quot; . The following prints your ip address but black on red and bold and italicized and underlined and blinking . echo -e &quot; e[31;40;1;3;4;7m $(hostname -I) e[0m&quot; . The following script demonstrates text coloring with echo interpretation. . echo &quot;Here are the options:&quot; echo &quot;1. Print unedecorated text&quot; echo &quot;2. Print red text&quot; echo &quot;3. Print red on black and bold and italicized and underlined and blinking text&quot; echo &quot;4. Print text in color of choice&quot; echo &quot;5. What&#39;s your favorite color?&quot; read -p &quot;Enter choice: &quot; num if [ $num = &quot;5&quot;]; then echo -e &quot;My favorite color is e[33myellow e[0m&quot; else read -p &quot;Text to print: &quot; text fi if [ $num = &quot;1&quot; ]; then echo $text fi if [ $num = &quot;2&quot; ]; then echo -e &quot; e[31m $text e[0m&quot; fi if [ $num = &quot;3&quot;]; then echo -e &quot; e[31;40;1;3;4;7m $text e[0m&quot; fi if [ $num = &quot;4&quot;]; then echo &quot;1. Grey&quot; echo &quot;2. Red&quot; echo &quot;3. Green&quot; echo &quot;4. Yellow&quot; echo &quot;5. Blue&quot; echo &quot;6. Purple&quot; echo &quot;7. Cyan&quot; echo &quot;8. White&quot; read -p &quot;Enter choice: &quot; color echo -e &quot; e[3$($color - 1)m $text e[0m&quot; fi .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/08/26/bash.html",
            "relUrl": "/jupyter/2022/08/26/bash.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "First Markdown Post",
            "content": "Cool H1 . Isn’t this great? . This is H2 . Literally on a whole ‘nother level. . Reasons why markdown is cool: . Universial | Be more expressive | . . Mandatory Tolkien quote: .       The Road goes ever on and on           Down from the door where it began. . Bilbo on p.35 of The Lord of the Rings, I/i: “A Long-Expected Party” .",
            "url": "https://calrethonofmirkwood.github.io/csablog/markdown/2022/08/24/first.html",
            "relUrl": "/markdown/2022/08/24/first.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Juypter Notebook Python Demonstration",
            "content": "Hello World Python Demonstration . The following code will print &quot;Hello World!&quot;, a popular programming dummy text. . print(&quot;Hello World!&quot;) . Hello World! .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2022/08/22/first.html",
            "relUrl": "/jupyter/2022/08/22/first.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://calrethonofmirkwood.github.io/csablog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://calrethonofmirkwood.github.io/csablog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://calrethonofmirkwood.github.io/csablog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Kpop Compatibility Quiz",
          "content": "Take this amazing personality quiz to determine which kpop idol you are most compatible with. . . . &lt;/div&gt; .",
          "url": "https://calrethonofmirkwood.github.io/csablog/quiz/",
          "relUrl": "/quiz/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://calrethonofmirkwood.github.io/csablog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}