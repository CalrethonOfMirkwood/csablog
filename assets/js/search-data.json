{
  
    
        "post0": {
            "title": "Java Console Menu",
            "content": "The following is a java console menu with descriptive comments. A lot of the color skills I use here I learned from making my eariler bash notebook. . import java.util.Scanner; // scanner takes in user input import java.lang.Math; // Math library has RNG funciton import java.net.InetAddress; // get ip address import java.net.UnknownHostException; // host ecxeption for ip address public class consoleMenu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORSTEXT = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; public final String[][] COLORSHIGH = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[41m&quot;}, {&quot;Green&quot;, &quot; u001B[42m&quot;}, {&quot;Yellow&quot;, &quot; u001B[43m&quot;}, {&quot;Blue&quot;, &quot; u001B[44m&quot;}, {&quot;Purple&quot;, &quot; u001B[45m&quot;}, {&quot;Cyan&quot;, &quot; u001B[46m&quot;}, {&quot;White&quot;, &quot; u001B[47m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes public final String[] LOADING = {&quot;L&quot;,&quot;o&quot;,&quot;a&quot;,&quot;d&quot;,&quot;i&quot;,&quot;n&quot;,&quot;g&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot; &quot;}; // Constructor on this Object takes control of menu events and actions public consoleMenu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot; u001B[31m __ .__ &quot;); System.out.println(&quot; u001B[31m |__|_____ ___ _______ ____ ____ ____ ______ ____ | | ____ &quot;); System.out.println(&quot; u001B[31m | | __ / / __ _/ ___ / _ / / ___// _ | | _/ __ &quot;); System.out.println(&quot; u001B[31m | | / __ _ / / __ _ ___( &lt;_&gt; )| | ___ ( &lt;_&gt; )| |__ ___/ &quot;); System.out.println(&quot; u001B[31m/ __| |(____ / _/ (____ / ___ &gt; ____/ |___| //____ &gt; ____/ |____/ ___ &gt; &quot;); System.out.println(&quot; u001B[31m ______| / / / / / / u001B[30m&quot;); System.out.println(&quot; u001B[33m~~~~~~~~~~~~~~~~~~~~~~~~~ u001B[30m&quot;); System.out.println(&quot; u001B[31m1 u001B[30m - Say Hello&quot;); System.out.println(&quot; u001B[33m2 u001B[30m - Output text colors&quot;); System.out.println(&quot; u001B[32m3 u001B[30m - Output highlight colors&quot;); System.out.println(&quot; u001B[36m4 u001B[30m - Loading in color&quot;); System.out.println(&quot; u001B[34m5 u001B[30m - Random number generator&quot;); System.out.println(&quot; u001B[35m6 u001B[30m - Print ip address&quot;); System.out.println(&quot; u001B[37m0 u001B[30m - Quit&quot;); System.out.println(&quot; u001B[33m~~~~~~~~~~~~~~~~~~~~~~~~~ u001B[30m n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Quitting. Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORSTEXT.length; i++) // loop through COLORS array System.out.print(COLORSTEXT[i][ANSI] + COLORSTEXT[i][NAME] + &quot; &quot;); break; case 3: for(int i = 0; i &lt; COLORSHIGH.length; i++) // loop through COLORS array System.out.print(COLORSHIGH[i][ANSI] + COLORSHIGH[i][NAME] + &quot; &quot;); break; case 4: for (int i = 0; i &lt; 66; i++) { // fixed length loading bar, 66 characters int random = (int) (Math.random() * COLORSTEXT.length); // random logic try { Thread.sleep(50); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORSTEXT[random][ANSI] + LOADING[i % 11]); } break; case 5: Scanner fivescan = new Scanner(System.in); System.out.println(&quot;Random number generator&quot;); System.out.println(&quot; Choose minimum (integer) number: &quot;); int min = fivescan.nextInt(); System.out.println(&quot; Choose maximum (also integer) number: &quot;); int max = fivescan.nextInt(); int num = (int) ((Math.random() * (max - min)) + min); int color = (int) (Math.random() * COLORSTEXT.length); System.out.print(&quot; Your random number: &quot; + COLORSTEXT[color][ANSI] + num); break; case 6: try { InetAddress localHost = InetAddress.getLocalHost(); String ipaddress = localHost.getHostAddress(); int random = (int) (Math.random() * COLORSTEXT.length); // random logic color chooser System.out.print(&quot;Your ip address is &quot; + COLORSTEXT[random][ANSI] + &quot; u001B[1m&quot; + ipaddress); } catch (UnknownHostException e) { e.printStackTrace(); } break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new consoleMenu(); // starting Menu object } } Menu.main(null); .",
            "url": "https://calrethonofmirkwood.github.io/zamnation/jupyter/2022/09/05/consolemenu.html",
            "relUrl": "/jupyter/2022/09/05/consolemenu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Blog Goals",
            "content": "This Blog . This blog was made to meet the requirements of my CSA class and College Board. However, there is much more I can do with this blog. . I am thinking of using this to support me in APEL and my general interest in literature. . I have several options: publishing my short stories, grammar or rethoric lessons, book reviews, or general book-related blogging. I may choose just one but will most likely do a mix of all four. . Of course, this will all be in addition to the 10 College Board units that I will go through this year. I am sure I can use the things I learn in college board to improve my blog so I can better describe literature. . PBL vs College Board? . Project-based learning is the curriculum of the class, College Board sets different requriements. . PBL is generally project-focused and will be most visible on this blog. In contrast, CB material is largely theoretical and will be moure foundational to the blog. . I will differentiate between the two by using tags. Currently all of the blog posts on this blog have the [jupyter] tag. I plan to make two more tags, [PBL] and [CB] to differentiate between my PBL and College Board work. .",
            "url": "https://calrethonofmirkwood.github.io/zamnation/jupyter/2022/08/29/goals.html",
            "relUrl": "/jupyter/2022/08/29/goals.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Primitive Data Types",
            "content": "Primitives . Java has several data types, the most basic of which are &quot;primitives&quot;. . Excluding booleans, primitive data types are numeric: either a number or a character. Some primitive data types are char (single alphanumeric character), int (whole numbers), double (decimal number), and boolean (true or false condition). . Non-primitive data types are strings and arrays. . import java.util.Scanner; // import scanner function to take user input public class primitiveTest { // class public static void main(String[] args) { // main Scanner input; // begin story System.out.println(&quot;You woke up and went to school.&quot;); // string wrapper input = new Scanner(System.in); // create scanner System.out.println(&quot;What is your name: &quot;); // take input String name = input.nextLine(); // sets variable and checks that data type is string System.out.println(&quot;You, &quot; + name + &quot; woke up and went to school.&quot;); input.close(); System.out.println(); // primitive int input = new Scanner(System.in); // create scanner System.out.println(&quot;How many friends do you have?: &quot;); // take input try { int friends = input.nextInt(); // sets variable and checks that data type is int if (friends == 0) System.out.println(&quot;You have &quot; + friends + &quot; friends. SAD!&quot;); if (friends == 1) System.out.println(&quot;You have &quot; + friends + &quot; friend.&quot;); if (friends &gt;= 2) System.out.println(&quot;You have &quot; + friends + &quot; friends.&quot;); } catch (Exception e) { // error if input is not int System.out.println(&quot;You can only have an integer number of friends, that isn&#39;t an int, &quot; + e); } input.close(); System.out.println(); // primitive double System.out.println(&quot;It&#39;s time for CSA.&quot;); input = new Scanner(System.in); // create scanner System.out.println(&quot;What is your grade in the class ? (double format without %): &quot;); // take input try { double grade = input.nextDouble(); // sets variable and checks that data type is double if (grade &lt;= 50.0) System.out.println(grade + &quot;%... I don&#39;t know what to say.&quot;); else if (grade &lt;= 70.00) System.out.println(grade + &quot;%... Looks like you been code code coding.&quot;); else if (grade &lt;= 80.0) System.out.println(grade + &quot;%. I&#39;m not in the mood to make any moral judgements on them.&quot;); else if (grade &lt;= 90.0) System.out.println(grade + &quot;%. You&#39;re doing ok.&quot;); else System.out.println(grade + &quot;%! &quot; + name + &quot;crusing.&quot;); } catch (Exception e) { // error if input is not a double System.out.println(&quot;Not an double (form like 13.51), &quot; + e); } input.close(); System.out.println(); // primitive boolean System.out.println(&quot;It&#39;s crossover grading time.&quot;); input = new Scanner(System.in); System.out.println(&quot;Did you do your work? (lowercase true/false): &quot;); // take input try { boolean hw = input.nextBoolean(); if (hw) System.out.println(&quot;You did your homework. Great.&quot;); else System.out.println(&quot;You didn&#39;t do your homework. Are you ready to face the consequences?&quot;); } catch (Exception e) { // if not true or false System.out.println(&quot;Not an boolean (true or false), &quot; + e); } input.close(); } } primitiveTest.main(null); .",
            "url": "https://calrethonofmirkwood.github.io/zamnation/jupyter/2022/08/28/primitives.html",
            "relUrl": "/jupyter/2022/08/28/primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Bashbook",
            "content": "Bash demonstration . In this usage echo prints out the given argument. . echo &quot;Echo returns its argument&quot; . The following script prints your ip address. . hostname -I . The following prints your ip address but red . echo -e &quot; e[31m $(hostname -I) e[0m&quot; . The following prints your ip address but black on red and bold and italicized and underlined and blinking . echo -e &quot; e[31;40;1;3;4;7m $(hostname -I) e[0m&quot; . The following script demonstrates text coloring with echo interpretation. . echo &quot;Here are the options:&quot; echo &quot;1. Print unedecorated text&quot; echo &quot;2. Print red text&quot; echo &quot;3. Print red on black and bold and italicized and underlined and blinking text&quot; echo &quot;4. Print text in color of choice&quot; echo &quot;5. What&#39;s your favorite color?&quot; read -p &quot;Enter choice: &quot; num if [ $num = &quot;5&quot;]; then echo -e &quot;My favorite color is e[33myellow e[0m&quot; else read -p &quot;Text to print: &quot; text fi if [ $num = &quot;1&quot; ]; then echo $text fi if [ $num = &quot;2&quot; ]; then echo -e &quot; e[31m $text e[0m&quot; fi if [ $num = &quot;3&quot;]; then echo -e &quot; e[31;40;1;3;4;7m $text e[0m&quot; fi if [ $num = &quot;4&quot;]; then echo &quot;1. Grey&quot; echo &quot;2. Red&quot; echo &quot;3. Green&quot; echo &quot;4. Yellow&quot; echo &quot;5. Blue&quot; echo &quot;6. Purple&quot; echo &quot;7. Cyan&quot; echo &quot;8. White&quot; read -p &quot;Enter choice: &quot; color echo -e &quot; e[3$($color - 1)m $text e[0m&quot; fi .",
            "url": "https://calrethonofmirkwood.github.io/zamnation/jupyter/2022/08/26/bash.html",
            "relUrl": "/jupyter/2022/08/26/bash.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "First Markdown Post",
            "content": "Cool H1 . Isn’t this great? . This is H2 . Literally on a whole ‘nother level. . Reasons why markdown is cool: . Universial | Be more expressive | . . Mandatory Tolkien quote: .       The Road goes ever on and on           Down from the door where it began. . Bilbo on p.35 of The Lord of the Rings, I/i: “A Long-Expected Party” .",
            "url": "https://calrethonofmirkwood.github.io/zamnation/markdown/2022/08/24/first.html",
            "relUrl": "/markdown/2022/08/24/first.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Juypter Notebook Python Demonstration",
            "content": "Hello World Python Demonstration . The following code will print &quot;Hello World!&quot;, a popular programming dummy text. . print(&quot;Hello World!&quot;) . Hello World! .",
            "url": "https://calrethonofmirkwood.github.io/zamnation/jupyter/2022/08/22/first.html",
            "relUrl": "/jupyter/2022/08/22/first.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://calrethonofmirkwood.github.io/zamnation/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://calrethonofmirkwood.github.io/zamnation/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://calrethonofmirkwood.github.io/zamnation/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://calrethonofmirkwood.github.io/zamnation/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}